# Generated by Django 4.2.7 on 2024-04-07 12:05

import commerce.models.company
import commerce.models.products
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import utils.views.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='логин')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Админ'), (2, 'клиент'), (3, 'Менеджер'), (4, 'Доставщик'), (5, 'Шеф')], default=2, verbose_name='роль')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='номер телефона')),
                ('telegram_chat_id', models.CharField(blank=True, max_length=12, null=True, verbose_name='телеграм id')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='создан в')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='изменено в')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='название')),
                ('order', models.PositiveIntegerField(default=9999, verbose_name='порядок')),
                ('hide', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': ' Категория',
                'verbose_name_plural': ' Категории',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to=commerce.models.company.get_upload_path, verbose_name='логотип')),
                ('name', models.CharField(max_length=255, verbose_name='название')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True, verbose_name='WhatsApp')),
                ('phone_number', models.CharField(max_length=12, validators=[utils.views.validators.PhoneNumberValidator()], verbose_name='номер телефона')),
                ('address', models.TextField(verbose_name='адрес')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
            },
        ),
        migrations.CreateModel(
            name='CompanyDeliveryZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название зоны')),
                ('additional_charge', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='дополнительная плата')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_zones', to='commerce.company')),
            ],
            options={
                'verbose_name': 'зона доставки',
                'verbose_name_plural': 'зоны доставки',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='создан в')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='изменено в')),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Общая сумма')),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Скидка')),
                ('final_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Итог')),
                ('status', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Новый'), (2, 'Принято'), (3, 'Готово'), (4, 'Курьер забрал'), (5, 'Доставлено'), (6, 'Отменен')], db_index=True, default=1, verbose_name='статус')),
                ('discount', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='скидка')),
                ('payment_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Карта'), (2, 'Наличные')], db_index=True, null=True, verbose_name='способ оплаты')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='доставлено в')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Оплачено')),
                ('order_type', models.PositiveSmallIntegerField(choices=[(1, 'Самовывоз'), (2, 'Доставка')], db_index=True, default=1, verbose_name='Тип заказа')),
                ('additional_charge', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='дополнительная плата')),
                ('number_of_cutlery', models.PositiveIntegerField(blank=True, null=True, verbose_name='Приборы')),
                ('address', models.CharField(blank=True, max_length=228, null=True, verbose_name='адрес')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='комментарий')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='commerce.company')),
                ('delivery_zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='commerce.companydeliveryzone', verbose_name='зона доставки')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='пользватель')),
            ],
            options={
                'verbose_name': ' Заказ',
                'verbose_name_plural': ' Заказы',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='создан в')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='изменено в')),
                ('name', models.CharField(max_length=128, verbose_name='название')),
                ('description', models.CharField(blank=True, max_length=300, verbose_name='описание')),
                ('image', models.ImageField(blank=True, upload_to=commerce.models.products.get_upload_path, validators=[utils.views.validators.FileValidator(content_types=('image/jpeg', 'image/png'), max_size=1048576)], verbose_name='изображение')),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='себестоимость')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='цена')),
                ('order', models.PositiveIntegerField(default=9999, verbose_name='порядок')),
                ('hide', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='commerce.category', verbose_name='категория')),
            ],
            options={
                'verbose_name': ' Продукт',
                'verbose_name_plural': ' Продукты',
                'unique_together': {('category_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='количество')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='цена')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Общая сумма')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='commerce.order', verbose_name='Заказ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='commerce.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Детали заказа',
                'verbose_name_plural': 'Детали заказа',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='создан в')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='изменено в')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='название')),
                ('address', models.CharField(blank=True, max_length=228, verbose_name='адрес')),
                ('customer_type', models.PositiveSmallIntegerField(choices=[(1, 'B2B'), (2, 'клиент')], db_index=True, default=1, verbose_name='Тип клиента')),
                ('phone', models.CharField(max_length=12, validators=[utils.views.validators.PhoneNumberValidator()], verbose_name='Телефон клиента')),
                ('discount', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='скидка')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer', to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.AddField(
            model_name='category',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='commerce.company'),
        ),
    ]
